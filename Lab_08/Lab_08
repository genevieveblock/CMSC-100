import random
import arcade


SPRITE_SCALING = 0.2
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
text = " : Congratulations You've Won!"


class Fox(arcade.Sprite):

    def __init__(self, filename, sprite_scaling):

        super().__init__(filename, sprite_scaling)

        self.change_x = 0
        self.change_y = 0

    def update(self):

        # Move the player
        self.center_x += self.change_x
        self.center_y += self.change_y


        if self.left < 0:
            self.change_x *= -1

        if self.right > SCREEN_WIDTH:
            self.change_x *= -1

        if self.bottom < 0:
            self.change_y *= -1

        if self.top > SCREEN_HEIGHT:
            self.change_y *= -1

class Corn(arcade.Sprite):

    def reset_pos(self):
        self.center_y = random.randrange(SCREEN_HEIGHT + 20,
                                         SCREEN_HEIGHT + 100)
        self.center_x = random.randrange(SCREEN_WIDTH)

    def update(self):

        self.center_y -= 1

        if self.top < 0:
            self.reset_pos()



class MyAppWindow(arcade.Window):

    """ Main application class. """

    def __init__(self, width, height):

        super().__init__(width, height)
        # Sprite lists
        self.all_sprites_list = None
        self.fox_list = None
        self.corn_list = None

        # Set up the player
        self.score = 0
        self.player_sprite = None

    def start_new_game(self):
        """ Set up the game and initialize the variables. """

        # Sprite lists
        self.all_sprites_list = arcade.SpriteList()
        self.fox_list = arcade.SpriteList()
        self.corn_list = arcade.SpriteList()

        # Set up the player
        self.score = 0
        self.player_sprite = arcade.Sprite("chicken3.png",
                                           SPRITE_SCALING)
        self.player_sprite.center_x = 25
        self.player_sprite.center_y = 25
        self.all_sprites_list.append(self.player_sprite)

        for i in range(15):

            # Create the fox instance
            # Fox icon from iconarchive.com, Feb. 28. 17
            fox = Fox("fox-icon.png", SPRITE_SCALING / 2)

            # Position the fox
            fox.center_x = random.randrange(SCREEN_WIDTH)
            fox.center_y = random.randrange(SCREEN_HEIGHT)
            fox.change_x = random.randrange(-3, 4)
            fox.change_y = random.randrange(-3, 4)

            # Add the coin to the lists
            self.all_sprites_list.append(fox)
            self.fox_list.append(fox)

        for i in range(50):

            # Create the corn instance
            # Corn icon from clipartfest.com, Feb. 28. 17
            corn = Corn("1f33d.png", SPRITE_SCALING / 1)

            # Position the corn
            corn.center_x = random.randrange(SCREEN_WIDTH)
            corn.center_y = random.randrange(SCREEN_HEIGHT)

            # Add the corn to the lists
            self.all_sprites_list.append(corn)
            self.corn_list.append(corn)




        # Don't show the mouse cursor
        self.set_mouse_visible(False)

        # Set the background color
        arcade.set_background_color(arcade.color.BABY_PINK)

    def on_draw(self):

        # This command has to happen before we start drawing
        arcade.start_render()

        # Draw all the sprites.
        self.all_sprites_list.draw()

        # Put the text on the screen.
        output = "Score: " + str(self.score)
        input = "Score: " + str(self.score) + text

        if len(self.corn_list) > 0:
            arcade.draw_text(output, 10, 560, arcade.color.BLACK, 20)

        if len(self.corn_list) == 0:
            arcade.draw_text(input, 10, 560, arcade.color.BLACK, 20)

    def on_mouse_motion(self, x, y, dx, dy):

         if len(self.corn_list) > 0:
             self.player_sprite.center_x = x

         if len(self.corn_list) > 0:
             self.player_sprite.center_y = y


    def animate(self, delta_time):
        """ Movement and game logic """

        # Call update on all sprites (The sprites don't do much in this
        # example though.)
        if len(self.corn_list) > 0:
            self.all_sprites_list.update()




        # Generate a list of all sprites that collided with the player.

        hit_list1 = arcade.check_for_collision_with_list(self.player_sprite,
                                                        self.fox_list)
        hit_list = arcade.check_for_collision_with_list(self.player_sprite,
                                                        self.corn_list)


        # Loop through each colliding sprite, remove it, and add to the score.
        for fox in hit_list1:
            self.score -= 1
            fox.kill()



        for corn in hit_list:
            self.score += 1
            corn.kill()


def main():
    window = MyAppWindow(SCREEN_WIDTH, SCREEN_HEIGHT)
    window.start_new_game()
    arcade.run()


if __name__ == "__main__":
    main()
